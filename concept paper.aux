\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction }{1}}
\@writefile{toc}{\contentsline {paragraph}{Csp-like language is the communicating sequential of processes, it’s a process for describing concurrent processes and their interaction with other compiler languages. The parallel programming language Occam is essentially an implementable sublanguage of CSP.}{1}}
\@writefile{toc}{\contentsline {paragraph}{The parallel programming language Occam is essentially an implementable sublanguage
of CSP. Occam is a concurrent programming language that builds on the communicating
sequential processes (CSP), process algebra [?, ?], and shares many of its features }{1}
\@writefile{toc}{\contentsline {section}{\numberline {2}Background of the csp-like languages.}{1}}
\@writefile{toc}{\contentsline {paragraph}{Most of the programming languages in the computing world have a very heavy syntax and wide grammar, lack parallelism and more so not portable. These programs run on a few clusters, servers and embedded systems.}{1}}
\@writefile{toc}{\contentsline {paragraph}{More so, they lack an extension to Occam which permits recursion and still lack virtual machines which are fully optimized for displaying a simulation, and translating the virtual machine code into native code for a real machine.}{1}}
\@writefile{toc}{\contentsline {paragraph}{The csp is a communicating sequential of processes, it a process algebra for describing concurrent processes and their interaction with each other. Csp itself is used primarily for formal modelling and it uses tools such as FBR and ProBE. }{1}}
\@writefile{toc}{\contentsline {paragraph}{Csp-like language is used for describing some interesting and complex system that are ready implemented directly and others that we cannot yet implement directly, during implementation of such interesting and complex systems we can use tools such as JCsp, c++csp,CTJ and Kroc/Occam-pi.}{1}}
\@writefile{toc}{\contentsline {paragraph}{The Occam compiler is the new implemented compiler that was designed to replace Kroc –complier, Kroc compiler was becoming increasingly difficult to use and maintain basing on its fairly old code base and most it was designed to run on 2MB of memory, therefore the Occam compiler was implemented to carter for the dynamic system.}{1}}
\@writefile{toc}{\contentsline {paragraph}{The aims of the project is to implement an extension to Occam which permits recursion; more ambitious projects might implement a distributed implementation with several communicating copies of the virtual machine. Other possibilities are to produce separate virtual machines, optimized for displaying a simulation, or for efficiency of implementation, or translating the virtual machine code into native code for a real machine.}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Problem statement }{1}}
\@writefile{toc}{\contentsline {paragraph}{The problem this project will address is to produce a small portable implementation of a subset of Occam, to implement a virtual machine based on the inmos transputer, and a compiler which will target the language.}{2}}
\@writefile{toc}{\contentsline {paragraph}{The exiting compiler could not permit recursion and its difficulty to use and maintain, therefore because that we came up with a project to implement an extension to Occam-complier that would support and permit recursion that would produce a separate virtual machines which are optimized for displaying simulation, for efficiency of implementation and also translating the virtual machine code into native code for a real machine.}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {4}The main objective }{2}}
\@writefile{toc}{\contentsline {paragraph}{The aim of this project is to produce a small portable implementation of a subset of Occam; the proposed technique is to implement a virtual machine based on the inmos transputer, and a compiler which targets that language.}{2}}
\@writefile{toc}{\contentsline {paragraph}{To implement an extension in Occam-compiler that would permit or support recursion and also to produce a separate virtual machine which are optimized for displaying simulation ,efficiency of implementation and translating the virtual machine code into native code for real machines.}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Specific objectives.}{2}}
\@writefile{toc}{\contentsline {paragraph}{To gather and analyze requirements that will be used in the design and development of a virtual machine based on the in mos Transputer, and a compiler which targets that language.}

\@writefile{toc}{\contentsline {section}{\numberline {5}The scope }{2}}
\@writefile{toc}{\contentsline {paragraph}{The design and its implementation will only be on the Occam-compiler by creating an extension on it that will permit and support recursion and thus producing separable virtual machine that are optimized for displaying simulation, efficiency of implementation and translating the virtual machine code into native code for real machine.}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Significance. }{2}}
\@writefile{toc}{\contentsline {paragraph}{Occam language support parallelism then other compiler languages.}
\@writefile{toc}{\contentsline {paragraph}{The virtual-machine concept provides complete protection of system resources since each virtual machine is isolated from all other virtual machines.  This isolation, however, permits no direct sharing of resources since it’s implemented with separable virtual machines.}
\@writefile{toc}{\contentsline {paragraph}{System development is done on the virtual machine, instead of on a physical machine and so does not disrupt normal system operation.}
\@writefile{toc}{\contentsline {section}{\numberline {7}Methodology.}{3}}
\@writefile{toc}{\contentsline {paragraph}{This section comprises of research/project design which describes the tools, instruments, approaches, processes and techniques, major algorithms and data structures to be employed in the research study, data collection, analysis, synthesis, design, logical flow, implementation, testing, and validation}{3}}
\@writefile{toc}{\contentsline {subparagraph}{• We will use c-programming language to create an extension in Occam-compiler that will permit recursion.}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {8}References}{3}}
\@writefile{toc}{\contentsline {paragraph}{Compiling csp- slide by Fred Barnes, September 2006.}
\@writefile{toc}{\contentsline {paragraph}{http://tack.sourceforge.net/olddocs/occam.pdf.}
